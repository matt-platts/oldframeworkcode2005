<?php

/*
 * CLASS: database_connection
 * Meta: make a database connection, parse sql, all database query functions etc
*/
class database_connection {
 
	private $host;
	private $database; 
	private $username;
	private $password;
	private $local_database;
	private $local_tables;
        private $dbh;
        private $result;
        public $sql;
	private $query_counter;
	public $query_list;
 
/*
 * Constructor
*/
function __construct($database=""){
	include_once(BASEPATH. "/dbconf.php");
	$BASEPATH=BASEPATH;
	$this->host=$host;
	$this->database=$database;
	$this->username=$username;
	$this->password=$password;
	$this->local_database=$local_database;
	$this->local_tables=$local_tables;
	if (!empty($database)){ $this->database = $database; }
	$this->dbh = mysqli_connect($this->host,$this->username,$this->password) or die("ERROR M1BV: Could not connect to database");
	$this->selected = mysqli_select_db($this->dbh,$this->database) or die("ERROR M2BVI");
	return $this->dbh;
}
 
/* 
 * Function block_query_rules
 * Meta: certain queries and strings not permitted in any sql queries run through here, these can be set below. 
*/
private function pass_block_query_rules(){
	// popular SQL injection attempts use hexadecimal in query strings / url paramaters to try and bypass filtering - lets knock that on the head
	if (preg_match("/,0x\d+,0x/i",$this->sql) && $_GET['action'] != "site_search_list"){
		format_error("FATAL ERROR 5515T",1);
		return false;
	}
	// block union queries
	if (preg_match("/SELECT.*UNION.*SELECT.*/i",$this->sql) && $_GET['action'] != "site_search_list"){
		format_error("FATAL ERROR 5515X",1);
		return false;
	}
	// block load_file functionality
	if (preg_match("/SELECT.* load_file.*\(.*\).*FROM/i",$this->sql)){
		format_error("FATAL ERROR 5515Y in " . $this->sql,1);
		return false;
	}
	// no access to user
	if (preg_match("/mysql\.user/i",$this->sql)){
		format_error("FATAL ERROR 5515U",1);
		return false;
	}
	// no acces to information_schema
	if (preg_match("/information_schema/i",$this->sql)){
		format_error("FATAL ERROR 5515K",1);
		return false;
	}
	return true;
}

/* 
 * Function: dbname
 * Returns: string - nanme of database
*/
public function dbname(){
	return $this->database;
}

/* 
 * Function query
 * Meta: query is called from the system only. Any embedded or user submitted sql goes through the similar function user_content_query where it is subject to full permissions checking.
 *       Why? The system needs special privileges to initialize
*/
public function query($sql){

	if (empty($sql)){ return false; }

	$this->sql = $sql;

	if (!$this->pass_block_query_rules()) { return false; }
	
	// If we have a split database with a separate $local_database, the query needs to be modified to prepend table names with database names
	if ($this->local_database){
		$sql=$this->modify_query_for_split_database($sql);
	}
		
	// In user content queries we would always check permissions here - see similar function below. As this is for system SQL we don't need to. 

	$this->result = mysqli_query($this->dbh,$sql) or format_error("ERROR 519818 in $sql",$this->db_error_code(),"",mysqli_error() . ".<br />Originating Statement: " . $sql,"1XDrF9");
	$this->query_counter++;

	//print "Query count: " . $this->query_counter . ": $sql<br />";
	return $this->result;
}

/* 
 * Function: user_content_query
 * Meta : User content query only accepts SELECT statements and does full permissions checking as this is SQL entered into content pages, 
*         templates and widgets as opposed to system sql (which goes through the generic query function above).
*/

public function user_content_query($sql){

	if (!preg_match("/^SELECT /i",trim($sql))){
		return false;
	}

	if (!$this->pass_block_query_rules()){ return false; }

	$this->sql = $sql;

	// If we have a split database with a separate $local_database, the query needs to be modified..
	if ($this->local_database){
		$sql=$this->modify_query_for_split_database($sql);
	}
	
	// Check permissions - errors are automatically generated by this function so we can just return false;
	if (!$this->check_permissions_on_user_content_query($sql)) { return false;}

	$this->result = mysqli_query($this->dbh,$sql) or format_error("ERROR 519818UC",1,"",mysqli_error() . ".<br />Originating Statement: " . $sql . " [END]");
	$this->query_counter++;
	//print "Query count: " . $this->query_counter . ": $sql<br />";
	return $this->result;

}

/*
 * Function admin_update_query
 * Meta: admin update query is used from the ajax updater only and applies to a single field only, so we can test on the format
*/
public function admin_update_query($sql,$table,$rowid){
	global $user;
	if (!$user){ print format_error("You are not logged in",1); exit; }	
	if (!preg_match('/UPDATE \w+ SET \w+ = "\w+" WHERE \w+ = "\w+"/i',$sql)){
		print format_error("Does not match accepted sql format $sql"); exit;
	}
	$this->sql = $sql;
	if (!$this->pass_block_query_rules()){ return false; }

	// If we have a split database with a separate $local_database, the query needs to be modified..
	if ($this->local_database){
		$sql=$this->modify_query_for_split_database($sql);
	}
	
	// Check permissions - errors are automatically generated by this function so we can just return false;
	if (!$this->check_permissions_on_update_query($sql,$table,$rowid)) { return false;}

	$this->result = mysqli_query($this->dbh,$sql) or format_error("ERROR 519818",$this->db_error_code(),"",mysqli_error() . ".<br />Originating Statement: " . $sql);
	$this->query_counter++;

	//print "Query count: " . $this->query_counter . ": $sql<br />";
	return $this->result;
}
 
/*
 * Function fetch_array
 * Meta: Maps onto PHPs mysqli_fetch_array
*/
public function fetch_array($result=""){
	if (empty($result)){ $result = $this->result; }
	return mysqli_fetch_array($result,MYSQLI_ASSOC);
}
 
/*
 * Function record_from_id
 * Meta: shortcut function for getting a whole record back from an id. 
 * Dev note: Shortcut used in system code only, never in direct response to end user request.
*/
public function record_from_id($from_table,$record_id){

	if (!preg_match("/^\w+$/",$from_table)) { return null;} // must be single word only
	if (!preg_match("/^\d+$/",$record_id)) { return null;} // must be digits only

	$from_table 	 = mysqli_real_escape_string($this->dbh,$from_table);
	$record_id	 = mysqli_real_escape_string($this->dbh,$record_id);

	$get_record_sql  = "SELECT * FROM " . $from_table . " WHERE id = " . $record_id;
	$get_record_result=$this->query($get_record_sql);
	while ($row=$this->fetch_array()){
		$return_value = $row;
	}
	return Codeparser::code_tags($return_value);
}

/*
 * Function db_quick_match
 * Meta: Simple match to get one column record out - send table, field to return, field where condition = and value of condition
 *       Will only return one record  (the LAST it finds) - need to add error checking
*/
public function db_quick_match($from_table,$return_field,$condition_field,$condition_value){

	if (!preg_match("/^\w+$/",$from_table)) { return null;}
	if (!preg_match("/^\w+$/",$return_field)) { return null;}
	if (!preg_match("/^\w+$/",$condition_field)) { return null;}

	$from_table 	 = mysqli_real_escape_string($this->dbh,$from_table);
	$return_field 	 = mysqli_real_escape_string($this->dbh,$return_field);
	$condition_field = mysqli_real_escape_string($this->dbh,$condition_field);
	$condition_value = mysqli_real_escape_string($this->dbh,$condition_value);

	$get_record_sql="SELECT $return_field FROM $from_table WHERE $condition_field = \"$condition_value\";";
	$get_record_result=$this->query($get_record_sql) or format_error("Error Code 918712");
	while ($row=$this->fetch_array($get_record_result)){
		$return_value=$row[$return_field];
	}
	return $return_value;
}

/* 
 * Function field_from_record_from_id
 * Param $from_table (string) - table to look in
 * Param $record_id (int) - 
 * Param $table_field (string) - specify the field to return
 * Param $where - condition upon which a value should be returned
 * Dev note: Needs to look up the primary key dynamically not simply use id
*/
public function field_from_record_from_id($from_table,$record_id,$table_field,$where=null){

	if (!preg_match("/^\w+$/",$from_table)) { return null;}
	if (!preg_match("/^\d+$/",$record_id)) { return null;}
	if (!preg_match("/^\w+$/",$table_field)) { return null;}

	$sql = "SELECT " . $table_field . " FROM " . $from_table . " WHERE id = " . mysqli_real_escape_string($this->dbh,$record_id);

	if (isset($where)){ $sql .= " AND " . $where;} // where allows us to use this function in the code without worrying about query strings calling bad things

	$get_record_result=$this->query($sql) or format_error("Error Code 81787 " . mysqli_error(),1,"","$sql generated the error " . mysqli_error());

	while ($row=$this->fetch_array($get_record_result)){
		$return_value = $row[$table_field];
	}
	return $return_value;
}

/*
 * Function check_permissions_on_query
 * Meta: check that the end user has permissions to run the requested query
 * Return bool ( 1 = user has permission)
*/
public function check_permissions_on_query($sql){

	global $user;
	$sql=trim($sql);
	if (preg_match("/^SELECT /i",$sql)){
		$table_list=$this->tables_in_sql_statement($sql);
		
		foreach ($table_list as $table){
			$permissions_result=$this->check_permissions($table,"view");
			if ($permissions_result['Status']==0){
				print format_error("Permissions check error (1): " . $permissions_result['Message'],0);
				return false;
			}
		}
	} else {
		return false;
	}
	return true;
}

/*
 * Function check_permissions_on_update_query
 * Meta: Permissions checker for updating tables only
*/
private function check_permissions_on_user_content_query($sql){

	global $user;
	$sql=trim($sql);

	if (preg_match("/^SELECT /i",$sql)){
		$table_list=$this->tables_in_sql_statement($sql);

		foreach ($table_list as $table){
			$permissions_result=$this->check_permissions($table,"view");
			if ($permissions_result['Status']==0){
				array_walk( debug_backtrace(), create_function( '$a,$b', 'print "<br /><b>". basename( $a[\'file\'] ). "</b>:<font color=\"red\">{$a[\'line\']}</font> &nbsp; <font color=\"green\">{$a[\'function\']} ()</font> &nbsp; -- ". dirname( $a[\'file\'] ). "/";' ) );
				print format_error("Permissions check error (2): " . $permissions_result['Message'],0);
				exit;
				$return=false;
			}
		}
	}
	return true;
}

/*
 * Function check_permissions_on_update_query
 * Meta: Permissions checker for updating tables only
*/
private function check_permissions_on_update_query($sql,$table,$rowid){

	global $user;
	$sql=trim($sql);
		$permissions_result=$this->check_permissions_inc_rowid($table,"view",$rowid);
		if ($permissions_result['Status']==0){
			print format_error("Permissions check error (3): " . $permissions_result['Message'],0);
			$return=false;
		}
	return true;
}

/*
 * Function tables_in_sql_statement
 * Meta: retrieve a list of all tables in an SQL SELECT statement
 * Param $sql (string) - incoming sql query
 * Return array - regular array of table names
*/
private function tables_in_sql_statement($sql){
	@list($part0,$orderby)=preg_split("/ ORDER BY /i",$sql);
	@list($part1,$having)=preg_split("/ HAVING /i",$part0);
	@list($part2,$where)=preg_split("/ WHERE /i",$part1);
	@list($fields,$from)=preg_split("/ FROM /i",$part2);
	$tables = preg_split("/ (INNER|OUTER|LEFT) JOIN /i",$from);
	$table_list=array();
	foreach ($tables as $table){
		@list($tablename,$rest) = preg_split("/ ON /i",$table);
		array_push($table_list,$tablename);
	}
	return $table_list;
}

/*
 * Function dump_dta
 * Meta: performs a mysql database dump
 * Return: String (the dump)
*/
public function dump_data($dumpstring){

	global $user;
	if ($user->value("type") != "master"){ return false;}

	$dumpstring=str_replace("{=username}",$this->username,$dumpstring);
	$dumpstring=str_replace("{=password}",$this->password,$dumpstring);
	$dumpstring=str_replace("{=database_name}",$this->database,$dumpstring);
	$dumpstring = "mysqldump " . $dumpstring;
	$exec_result=passthru($dumpstring);
	return $exec_result;
}

public function dump_data_exec($dumpstring,$sqldump){

	global $user;
	if ($user->value("type") != "master"){ return false;}

	$dumpstring=str_replace("{=username}",$this->username,$dumpstring);
	$dumpstring=str_replace("{=password}",$this->password,$dumpstring);
	$dumpstring=str_replace("{=database_name}",$this->database,$dumpstring);
	$dumpstring = "mysqldump " . $dumpstring;
	exec($dumpstring,$sqldump);
	return $sqldump;
}

/*
 * Function table_exists
 * Meta: Checks that a table exists in the database 
 * Param $table (string) - actual name of table in db
 * Returns bool
*/
public function table_exists($table){

	if (!preg_match("/^\w+$/",$table)) { return false;}
	if(mysqli_num_rows($this->query("SHOW TABLES LIKE '".$table."'"))==1) {
		return true;
	} else {
		return false;
	}
}

/*
 * Function field_exists_in_table
 * Meta: Check that a field exists in a table
 * Param $table string - table to search through
 * Param $field string - field to check for
 * Return bool
*/
public function field_exists_in_table($table,$field){

	$query="DESC $table";
	$rv=$this->query($query);

	while ($h=$this->fetch_array($rv)){
		if ($h['Field']==$field){
			return true;
		}
	}

	return false; 
}

/*
 * Function mofidy_query_for_split_database
 * Meta: Adds database names to query fields if they may be in multiple databases as part of a cross database query
 * Param $sql
 * Return String - Returns the incoming SQL with database names prepended to the query fields
*/
private function modify_query_for_split_database($sql){
	$wheresql="";

	if (preg_match("/^SELECT/i",$sql)){
		$local_tables=$this->local_tables;
		@list($startsql,$restofsql) = preg_split("/ FROM /i",$sql,2); // note the 2 in the third arg to preg_split - we only want 2 strings back
		if (preg_match("/ WHERE /i",$restofsql)){
			@list($midsql,$wheresql)=preg_split("/ WHERE /i",$restofsql);
			$act_on="midsql";
		} else {
			$act_on="restofsql";
		}
		foreach ($local_tables AS $local_table){
			$local_table_name= $this->local_database . "." . $local_table;
			if ($act_on=="restofsql"){
				$restofsql=preg_replace("/\b$local_table\b/",$local_table_name,$restofsql);
			} else {
				$midsql=preg_replace("/\b$local_table\b/",$local_table_name,$midsql);
			}
		}

		if ($wheresql){
			$sql=$startsql . " FROM " . $midsql . " WHERE " . $wheresql;
		} else if ($restofsql){
			$sql=$startsql . " FROM " . $restofsql;
		}

		//HACK ARGH! THIS ONLY APPLIES TO THE content_section table currently
		$hack_replace=$this->local_database . ".content_section";
		$sql=str_replace($hack_replace,"content_section",$sql);

	} else if (preg_match("/^UPDATE/i",$sql)){
		$test_update_sql = preg_replace("/^UPDATE /i","",$sql);
		$query_words=explode(" ",$test_update_sql);
		$test_update_table_name=$query_words[0];
		foreach ($this->local_tables AS $local_table){
			if ($test_update_table_name == $local_table){
				$query_words[0] = $this->local_database . "." . $local_table;
			}
		}	
		$sql = "UPDATE " . join(" ",$query_words);
	
	} else if (preg_match("/^INSERT INTO/i",$sql)){
		$test_insert_sql = preg_replace("/^INSERT INTO /i","",$sql);
		$query_words=explode(" ",$test_insert_sql);
		$test_insert_table_name=$query_words[0];
		foreach ($this->local_tables AS $local_table){
			if ($test_insert_table_name == $local_table){
				$query_words[0] = $this->local_database . "." . $local_table;
			}
		}
		$sql = "INSERT INTO " . join(" ",$query_words);

	} else if (preg_match("/^LOCK TABLES/i",$sql)){

		$test_lock_sql=preg_replace("/^LOCK TABLES /i","",$sql);
		$query_words=explode(" ",$test_lock_sql);
		$test_table_name=$query_words[0];
		foreach ($this->local_tables AS $local_table){
			if ($test_table_name == $local_table){
				$query_words[0]=$this->local_database . "." . $local_table;
			}
		}
		$sql = "LOCK TABLES " . join(" ",$query_words);

	}

	return $sql;
}

/*
 * Function check_permissions
 * Meta: Checks that the user has the appropriate permissions to run an SQL statement
 *       This is achieved by breaking the SQL apart, reading the table names and checking permissions for each
 * 	 Should be run once per table
 * Dev note: Do not attempt to change mysqli_query to db->query in the lines below or you will cause an infinite permissions loop!
*/
private function check_permissions($tablename, $permission_type, $permission_rowid=null, $try_as_admin=null){
	global $user;
        
	$debug=0;
	# 1. master accounts always win..
	if ($user){
		if ($user->value("type")=="master" && $permission_type != "drop"){return array("Status"=>1);}
	}

	// first select all permissions on the table where the type matches and load the rows into $permissions_on_table
	// then we can check if the permission itself passes other criterea
	$permissions_sql="SELECT * from permissions WHERE tablename = '" . $tablename . "' AND (permission_type = '" . $permission_type . "' OR permission_type='all')";
	$permissions_result=mysqli_query($this->dbh,$permissions_sql);
	$permissions_on_table=array();
	while ($permissions_row = mysqli_fetch_array($permissions_result,MYSQLI_ASSOC)){
		array_push ($permissions_on_table,$permissions_row);
	}
	// whitelist only so if no permissions are found, we can return an error message already, unless its the master user in which case return good.
	if (!$permissions_on_table){
		$return_data=array("Status" => 0, 
				   "Message" => format_error("Sorry, this request could not be executed (permissions on $tablename for $permission_type.)"), 
				   "Code" => "9598");
		return $return_data;
	}	

	// loop through permissions, see if anything passes
	$permission_check_result=array();
	$check_returned_rows=array();
	foreach ($permissions_on_table as $table_permission){
		if ($user->value("id")){
			// first check for userid permissions in a table field, if that exists then check the record exists to be edited. If so, pass it
			if ($table_permission['value']=="current_user()"){
				if (!$user->value("id")){ /*print "no user id as not logged in";*/ continue; }
				// if its view there may not be any rows returned but this doesnt mean it doesnt pass
				// however this is going to NEED to be checked later when the results come back for matches?
				if ($permission_type=="view"){
					//array_push($permission_check_result,"1"); 
					array_push($check_returned_rows,$table_permission['setting'] . ":" . $table_permission['operator']);
				}
				if ($debug){ print "its a user permission";}
				if ($permission_type != "add_or_edit" || ($permission_type=="add_or_edit" && $permission_rowid)){
					$table_permission['value'] = $user->value("id");
					$check_sql="SELECT * from $tablename WHERE " . $table_permission['setting'] . $table_permission['operator'] . $table_permission['value'];
					if ($permission_rowid){
						$check_sql .= " AND " . $table_permission['setting'] . $table_permission['operator'] . $permission_rowid;
					} 
					if ($debug){print "<p>check is $check_sql</p>";}
					$check_result=mysqli_query($this->dbh,$check_sql);
					while ($check_sql_row=mysqli_fetch_array($check_result,MYSQLI_ASSOC)){
						// NOTE: THIS IS DISABLED! THIS FUNCTION ONLY RUNS FOR USER CONTENT QUERY!
						//array_push($permission_check_result,$check_sql_row);
					}
				} else {
					// This is add_or_edit with no rowid (so should be a straight add), nothing to worry about
					array_push($permission_check_result,"1");
				}
			}

			// secondly if its a permission on a sysUserType, see if this matches the current user type
			$usertype=$user->value("type");
			if ($try_as_admin){ $usertype="administrator";}
			if ($table_permission['setting']=="sysUserType" && $usertype==$table_permission['value']){
				array_push($permission_check_result,"1");
				$check_returned_rows=""; // the user type passes, no row checking required
			} 
			// thirdly if its a permission on a specific userid compare to the current userid
			if ($table_permission['setting']=="user_id" || $table_permission['setting']=="userid" && $user->value("id")==$table_permission['value']){
				array_push($permission_check_result,"1");	
				$check_returned_rows="";
			}
			// fourthly -  hierarchial types
			if ($table_permission['setting']=="sysUserHierarchialType"){
				$eval_permission=0;
				$permission_eval_code = "\$eval_permission = (" . $user->value("hierarchial_order") . $table_permission['operator'] . $table_permission['value'] . ")? 1:0;";	
				$eval_result=eval($permission_eval_code);
				if ($eval_permission){
					array_push($permission_check_result,"1");
					$check_returned_rows="";
				}
			}
			// fifthly, if the value is simply 1 (free for all) then pass it
			if ($table_permission['value']=="1"){
				array_push($permission_check_result,"1");
			}
		} else {
			// there is no logged in user here
			array_push($permission_check_result,"1");
		}
	}
	// no results, fail the attempt
	if (!$permission_check_result){

		// superadmin code block - whereby a superadmin also gets his permissions tested as an admin. also the wrapper round the next section which is built from this block
		if ($user->value("type")=="superadmin"){
			$admin_result=$this->check_permissions($tablename, $permission_type, $permission_rowid, "try_as_admin");
			if ($admin_result['Status']=="1"){
				$permission_check_result=1;
			}
		}

		if (!$permission_check_result){
			$return_data=array("Status" => 0, "Message" => format_error("Permissions did not check out correctly on $tablename. This action cannot be performed."), "Code" => "9596");
			return $return_data;
		}
	}

	# Tablewide permissions exist, however if check_returned_rows flag is set then return the rows for further checking when a recordset is generated
	$return_data=array("Status" => 1, "Message" => "Permissions found on $tablename", "Code" => "1");
	if ($check_returned_rows){ $return_data['check_returned_rows']=join(";",$check_returned_rows); }
	if ($permission_check_result){ 
		return $return_data;
	}
}

/*
 * Function check_permissions_inc_rowid
 * Meta: Not only checks table-wide permissions but also that the user can access the particular row for the action
*/
private function check_permissions_inc_rowid($tablename, $permission_type, $permission_rowid){
	global $user;
	$debug=0;

	// 1. first select all permissions on the table where the type matches and load the rows into $permissions_on_table
	// then we can check if the permission itself passes other criterea
	$permissions_sql="SELECT * from permissions WHERE tablename = '" . $tablename . "' AND (permission_type = '" . $permission_type . "' OR permission_type='all')";
	$permissions_result=mysqli_query($this->dbh,$permissions_sql);
	$permissions_on_table=array();
	while ($permissions_row = mysqli_fetch_array($permissions_result,MYSQLI_ASSOC)){
		array_push ($permissions_on_table,$permissions_row);
	}

	// 2. We are doing whitelist only, so if no permissions are found, we can return an error message already.
	if (!$permissions_on_table){
		$return_data=array("Status" => 0, 
				   "Message" => format_error("Sorry, this request could not be executed (permissions on $tablename for $permission_type.)"), 
				   "Code" => "9598");
		return $return_data;
	}	

	// 3 Loop through permissions, see if anything passes
	$permission_check_result=array();
	$check_returned_rows=array();
	foreach ($permissions_on_table as $table_permission){
		// Updating is only allowed for users who are logged in
		if ($user->value("id")){
			// first check for userid permissions in a table field, if that exists then check the record exists to be edited. If so, pass it
			if ($table_permission['value']=="current_user()"){
				if (!$user->value("id")){ continue; }
				// if its view there may not be any rows returned but this doesnt mean it doesnt pass
				// however this is going to NEED to be checked later when the results come back for matches
				// se we add it to the check_returned_rows array
				if ($permission_type=="view"){
					array_push($check_returned_rows,$table_permission['setting'] . ":" . $table_permission['operator']);
				}
				if ($permission_type != "add_or_edit" || ($permission_type=="add_or_edit" && $permission_rowid)){
					$table_permission['value'] = $user->value("id");
					//print "setting of " . $table_permission['value'] . " to match user id of " . $user->value("id");
					$check_sql="SELECT * from $tablename WHERE " . $table_permission['setting'] . $table_permission['operator'] . $table_permission['value'];
					if ($permission_rowid){
						$check_sql .= " AND " . $table_permission['setting'] . $table_permission['operator'] . $permission_rowid;
					} 
					$check_result=mysqli_query($this->dbh,$check_sql);
					while ($check_sql_row=mysqli_fetch_array($check_result,MYSQLI_ASSOC)){
						// NOTE: THIS IS DISABLED! THIS FUNCTION ONLY RUNS FOR USER CONTENT QUERY!
						//array_push($permission_check_result,$check_sql_row);
					}
				} else {
					// temporarily let it through - this is add_or_edit with no rowid (so should be a straight add into a multi record form, nothing to worry about)
					// No - there is everthing to worry about! -  Matt
					// array_push($permission_check_result,"1");
				}
			}
			//secondly if its a permission on a sysUserType, see if this matches the current user type
			if ($table_permission['setting']=="sysUserType" && $user->value("type")==$table_permission['value']){
				array_push($permission_check_result,"1");
				$check_returned_rows=""; // the user type passes, no row checking required
			}
			//thirdly if its a permission on a specific userid compare to the current userid
			if ($table_permission['setting']=="user_id" || $table_permission['setting']=="userid" && $user->value("id")==$table_permission['value']){
				array_push($permission_check_result,"1");	
				$check_returned_rows="";
			}
			//fourthly -  hierarchial types
			if ($table_permission['setting']=="sysUserHierarchialType"){
				$eval_permission=0;
				$permission_eval_code = "\$eval_permission = (" . $user->value("hierarchial_order") . $table_permission['operator'] . $table_permission['value'] . ")? 1:0;";	
				$eval_result=eval($permission_eval_code);
				if ($eval_permission){
					array_push($permission_check_result,"1");
					$check_returned_rows="";
				}
			}
			// fifthly, if the value is simply 1 (free for all) with nothing in the operator or setting, then pass it
			if ($table_permission['value']=="1" && !$table_permission['setting'] && !$table_permission['operator']){
				array_push($permission_check_result,"1");
			}
		} else {
			// there is no logged in user here
		}
	}

	// 4 - no results? fail the attempt
	if (!$permission_check_result){
		$return_data=array("Status" => 0, "Message" => format_error("Error: Permissions did not check out correctly on $tablename"), "Code" => "9596");
		return $return_data;
	}

	// 5 -  everything fine from here, return check_returned_rows for further checking when a recordset is generated
	$return_data=array("Status" => 1, "Message" => "Permissions found on $tablename", "Code" => "1");
	if ($check_returned_rows){ $return_data['check_returned_rows']=join(";",$check_returned_rows); }
	if ($permission_check_result){ 
		return $return_data;
	}
}

/* 
 * Function db_escape
 * Meta: public method to mysqli_real_escape_string
*/
public function db_escape($str){
	return mysqli_real_escape_string($this->dbh,$str);
}

/* 
 * Function db_errmsg
 * Meta: public method to mysqli_error
*/
public function db_errmsg($str){
	return mysqli_error($this->dbh);
}

/* 
 * Function db_num_rows
 * Meta: public method to mysqli_num_rows
 * Dev note: We are passing in result as per old mysql_ extension, but mysqli is a bit different. Note that its currently not using this input.
*/
public function num_rows($result=null){
	$return = mysqli_num_rows($this->result);
	return $return;
}

/* 
 * Function last_insert_id 
 * Meta: public method to mysqli_error
*/
public function last_insert_id(){
	return mysqli_insert_id($this->dbh);
}

public function db_error(){
	return mysqli_error($this->dbh);
}


/*
 * Function db_error_code()
 * Meta: Called from query, user_content_query etc if there is an error. Admin pages die with a non-fatal error code. Site pages die fatally
*/
private function db_error_code(){
	$errorcode=1;
	if($_SERVER['REQUEST_URI']){
		if(strpos(stristr($_SERVER['REQUEST_URI'],"dministrator.php"))){
			$errorcode=0;
		}
	}
	return $errorcode;
}

/*
 * Function close_db
*/
public function close_db(){
	mysqli_close($this->dbh);	
	$this->dbh=null;
}

/*
* Destruct
*/
function __destruct(){
	if ($this->dbh){
		mysqli_close($this->dbh);
	}
}

}

?>
